"""
the png is the latest db
"""""
-- Core Tables
CREATE TABLE role (
    role_id SERIAL PRIMARY KEY,
    role_name VARCHAR(50) UNIQUE NOT NULL,
    permissions JSONB
);

CREATE TABLE "user" (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    role_id INT REFERENCES role(role_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE customer (
    customer_id INT PRIMARY KEY REFERENCES "user"(user_id),
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    phone VARCHAR(20),
    address JSONB,
    loyalty_points INT DEFAULT 0
);

CREATE TABLE employee (
    employee_id INT PRIMARY KEY REFERENCES "user"(user_id),
    position VARCHAR(50),
    hire_date DATE,
    salary DECIMAL(10,2),
    manager_id INT REFERENCES employee(employee_id)
);

-- Product Structure
CREATE TABLE product_type (
    type_id SERIAL PRIMARY KEY,
    type_name VARCHAR(50) NOT NULL,
    description TEXT
);

CREATE TABLE size (
    size_id SERIAL PRIMARY KEY,
    size_name VARCHAR(50) NOT NULL,
    size_description TEXT,
    size_code VARCHAR(10)
);

CREATE TABLE product (
    product_id SERIAL PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    description TEXT,
    base_price DECIMAL(10,2),
    product_type_id INT REFERENCES product_type(type_id),
    is_available BOOLEAN DEFAULT TRUE
);

CREATE TABLE product_variant (
    variant_id SERIAL PRIMARY KEY,
    product_id INT REFERENCES product(product_id),
    size_id INT REFERENCES size(size_id),
    price DECIMAL(10,2) NOT NULL,
    is_available BOOLEAN DEFAULT TRUE,
    UNIQUE(product_id, size_id)
);

-- Inventory Management
CREATE TABLE inventory_type (
    type_id SERIAL PRIMARY KEY,
    type_name VARCHAR(50) NOT NULL,
    description TEXT
);

CREATE TABLE inventoryitem (
    item_id SERIAL PRIMARY KEY,
    item_name VARCHAR(100) NOT NULL,
    description TEXT,
    inventory_type_id INT REFERENCES inventory_type(type_id),
    unit_of_measure VARCHAR(20),
    perishable BOOLEAN DEFAULT FALSE,
    shelf_life_days INT
);

CREATE TABLE product_composition (
    composition_id SERIAL PRIMARY KEY,
    variant_id INT REFERENCES product_variant(variant_id),
    inventoryitem_id INT REFERENCES inventoryitem(item_id),
    quantity_required DECIMAL(10,2) NOT NULL,
    location_id INT REFERENCES location(location_id),
    notes TEXT
);

CREATE TABLE inventory_transaction (
    transaction_id SERIAL PRIMARY KEY,
    item_id INT REFERENCES inventoryitem(item_id),
    transaction_type VARCHAR(20) CHECK (transaction_type IN ('receipt', 'usage', 'adjustment', 'reservation', 'transfer')),
    quantity DECIMAL(10,2) NOT NULL,
    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    employee_id INT REFERENCES employee(employee_id),
    reference_id INT, -- Can reference orders, shipments, etc.
    reference_type VARCHAR(50), -- 'order', 'shipment', etc.
    notes TEXT
);

-- Order Management
CREATE TABLE "order" (
    order_id SERIAL PRIMARY KEY,
    customer_id INT REFERENCES customer(customer_id),
    employee_id INT REFERENCES employee(employee_id),
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20) CHECK (status IN ('pending', 'processing', 'completed', 'cancelled')),
    total_amount DECIMAL(10,2),
    delivery_address JSONB,
    delivery_date TIMESTAMP,
    payment_status VARCHAR(20)
);

CREATE TABLE orderitem (
    orderitem_id SERIAL PRIMARY KEY,
    order_id INT REFERENCES "order"(order_id),
    variant_id INT REFERENCES product_variant(variant_id),
    quantity INT NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    subtotal DECIMAL(10,2) GENERATED ALWAYS AS (quantity * unit_price) STORED
);

CREATE TABLE addons (
    addon_id SERIAL PRIMARY KEY,
    addon_name VARCHAR(100) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    is_available BOOLEAN DEFAULT TRUE
);

CREATE TABLE order_addon (
    order_addon_id SERIAL PRIMARY KEY,
    order_id INT REFERENCES "order"(order_id),
    addon_id INT REFERENCES addons(addon_id),
    quantity INT NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    subtotal DECIMAL(10,2) GENERATED ALWAYS AS (quantity * unit_price) STORED
);
